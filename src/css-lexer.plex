<?php

require_once "css-parser.php";

class CSSLexer {
    private $data;
    private $N;
    public $token;
    public $value;
    private $line;

    function __construct($data) {
        $this->data = $data;
        $this->N = 0;
        $this->line = 1;
    }

/*!lex2php
%input $this->data
%counter $this->N
%token $this->token
%value $this->value
%line $this->line

h        = /[a-fA-F0-9]/
nonascii = /[\x80-\xFF]/
unicode  = /\\[a-fA-F0-9]{1,6}(\r\n|[ \t\r\n\f])?/
escape   = /\\[a-fA-F0-9]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-fA-F]/
nmstart  = /(?:[_a-zA-Z\x80-\xFF]|\\[a-fA-F0-9]{1,6}(?:\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-fA-F])/
nmchar   = /[_a-zA-Z0-9\-\x80-\xFF]|\\[a-fA-F0-9]{1,6}(?:\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-fA-F]/
VEND     = /-?/
NMCONT   = /(?:[_a-zA-Z0-9\-\x80-\xFF]|\\[a-fA-F0-9]{1,6}(?:\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-fA-F])*/
NAME     = /(?:[_a-zA-Z0-9\-\x80-\xFF]|\\[a-fA-F0-9]{1,6}(?:\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-fA-F])+/
STRING1  = /"(?:[^\n\r\f\\"]|\\(?:\n|\r\n|\r))*"/
BADSTRING1 = /"(?:[^\n\r\f\\"]|\\(?:\n|\r\n|\r))*\\?/
STRING2  = /\x27(?:[^\n\r\f\\\x27]|\\(?:\n|\r\n|\r))*\x27/
BADSTRING2 = /\x27(?:[^\n\r\f\\\x27]|\\(?:\n|\r\n|\r))*\\?/
comment  = /\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\//
num      = /(?:[0-9]+|[0-9]*\.[0-9]+)/
url      = /(?:[!#$%&*-~\x80-\xFF]|\\[a-fA-F0-9]{1,6}(?:\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-fA-F])*/
BADURI1  = /url\([ \n\r\t\f]*(?:[!#$%&*-\[\]-~\x80-\xFF]|\\[a-fA-F0-9]{1,6}(?:\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-fA-F])*[ \n\r\t\f]*/
s = /[ \n\r\t\f]+/
w = /[ \n\r\t\f]*/
worcom = /(?:[ \n\r\t\f]|\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\/)*/
A = /(?:a|\\0{0,4}(41|61)(?:\r\n|[ \t\r\n\f])?)/
C = /(?:c|\\0{0,4}(43|63)(?:\r\n|[ \t\r\n\f])?)/
D = /(?:d|\\0{0,4}(44|64)(?:\r\n|[ \t\r\n\f])?)/
E = /(?:e|\\0{0,4}(45|65)(?:\r\n|[ \t\r\n\f])?)/
G = /(?:g|\\0{0,4}(47|67)(?:\r\n|[ \t\r\n\f])?|\\g)/
H = /(?:h|\\0{0,4}(48|68)(?:\r\n|[ \t\r\n\f])?|\\h)/
I = /(?:i|\\0{0,4}(49|69)(?:\r\n|[ \t\r\n\f])?|\\i)/
K = /(?:k|\\0{0,4}(4b|6b)(?:\r\n|[ \t\r\n\f])?|\\k)/
L = /(?:l|\\0{0,4}(4c|6c)(?:\r\n|[ \t\r\n\f])?|\\l)/
M = /(?:m|\\0{0,4}(4d|6d)(?:\r\n|[ \t\r\n\f])?|\\m)/
N = /(?:n|\\0{0,4}(4e|6e)(?:\r\n|[ \t\r\n\f])?|\\n)/
O = /(?:o|\\0{0,4}(4f|6f)(?:\r\n|[ \t\r\n\f])?|\\o)/
P = /(?:p|\\0{0,4}(50|70)(?:\r\n|[ \t\r\n\f])?|\\p)/
R = /(?:r|\\0{0,4}(52|72)(?:\r\n|[ \t\r\n\f])?|\\r)/
S = /(?:s|\\0{0,4}(53|73)(?:\r\n|[ \t\r\n\f])?|\\s)/
T = /(?:t|\\0{0,4}(54|74)(?:\r\n|[ \t\r\n\f])?|\\t)/
U = /(?:u|\\0{0,4}(55|75)(?:\r\n|[ \t\r\n\f])?|\\u)/
X = /(?:x|\\0{0,4}(58|78)(?:\r\n|[ \t\r\n\f])?|\\x)/
Z = /(?:z|\\0{0,4}(5a|7a)(?:\r\n|[ \t\r\n\f])?|\\z)/
ANYTHING = /./
*/
/*!lex2php
%statename YYINITIAL
s { $this->token = CSSParser::S; }
comment { $this->token = CSSParser::COMMENT; }
"<!--" { $this->token = CSSParser::CDO; }
"-->" { $this->token = CSSParser::CDC; }
"~=" { $this->token = CSSParser::INCLUDES; }
"|=" { $this->token = CSSParser::DASHMATCH; }

STRING1 { $this->token = CSSParser::STRING; }
STRING2 { $this->token = CSSParser::STRING; }
BADSTRING1 { $this->token = CSSParser::BAD_STRING; }
BADSTRING2 { $this->token = CSSParser::BAD_STRING; }

VEND nmstart NMCONT { $this->token = CSSParser::IDENT; }
"#" NAME { $this->token = CSSParser::HASH; }

"@" I M P O R T { $this->token = CSSParser::IMPORT_SYM; }
"@" P A G E { $this->token = CSSParser::PAGE_SYM; }
"@" M E D I A { $this->token = CSSParser::MEDIA_SYM; }
"@charset " { $this->token = CSSParser::CHARSET_SYM; }

"!" worcom I M P O R T A N T { $this->token = CSSParser::IMPORTANT_SYM; }

num E M { $this->token = CSSParser::EMS; }
num E X { $this->token = CSSParser::EXS; }
num P X { $this->token = CSSParser::LENGTH; }
num C M { $this->token = CSSParser::LENGTH; }
num M M { $this->token = CSSParser::LENGTH; }
num I N { $this->token = CSSParser::LENGTH; }
num P T { $this->token = CSSParser::LENGTH; }
num P C { $this->token = CSSParser::LENGTH; }
num D E G { $this->token = CSSParser::ANGLE; }
num R A D { $this->token = CSSParser::ANGLE; }
num G R A D { $this->token = CSSParser::ANGLE; }
num M S { $this->token = CSSParser::TIME; }
num S { $this->token = CSSParser::TIME; }
num H Z { $this->token = CSSParser::FREQ; }
num K H Z { $this->token = CSSParser::FREQ; }
num VEND nmstart NMCONT { $this->token = CSSParser::DIMENSION; }
num "%" { $this->token = CSSParser::PERCENTAGE; }
num { $this->token = CSSParser::NUMBER; }

"url(" w STRING1 w ")" { $this->token = CSSParser::URI; }
"url(" w url w ")" { $this->token = CSSParser::URI; }
BADURI1 { $this->token = CSSParser::BAD_URI; }
"url(" w STRING1 w { $this->token = CSSParser::BAD_URI; }
"url(" w BADSTRING1 { $this->token = CSSParser::BAD_URI; }

VEND nmstart NMCONT "(" { $this->token = CSSParser::FUNCT; }

//"#" { $this->token = CSSParser::HASHSIGN; }
//"(" { $this->token = CSSParser::LPAREN; }
")" { $this->token = CSSParser::RPAREN; }
"*" { $this->token = CSSParser::STAR; }
"+" { $this->token = CSSParser::PLUS; }
"," { $this->token = CSSParser::COMMA; }
"-" { $this->token = CSSParser::MINUS; }
"." { $this->token = CSSParser::DOT; }
"/" { $this->token = CSSParser::SLASH; }
":" { $this->token = CSSParser::COLON; }
";" { $this->token = CSSParser::SEMICOLON; }
"<" { $this->token = CSSParser::LT; }
"=" { $this->token = CSSParser::EQUALS; }
">" { $this->token = CSSParser::GT; }
"?" { $this->token = CSSParser::QUESTIONMARK; }
//"@" { $this->token = CSSParser::AT; }
//"[" { $this->token = CSSParser::LBRAKET; }
"]" { $this->token = CSSParser::RBRAKET; }
"{" { $this->token = CSSParser::LCURLY; }
//"|" { $this->token = CSSParser::PIPE; }
"}" { $this->token = CSSParser::RCURLY; }
"~" { $this->token = CSSParser::TILDE; }

ANYTHING { $this->token = CSSParser::YYTEXT; }
*/
}

//__END__
